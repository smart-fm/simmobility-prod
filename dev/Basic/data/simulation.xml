<?xml version="1.0" encoding="UTF-8"?>

<!-- Copyright Singapore-MIT Alliance for Research and Technology -->
<config>
    <constructs>
        <!-- Various database connections, used for loading network and agent data. -->
        <!-- Note that credentials (login details) are stored in a separate construct. -->
        <databases>
            <database id="fm_remote" dbtype="postgres">
                <host value="172.25.xxx.xxx"/>
                <port value="5432"/>
                <dbname value="simmobcity"/>
            </database>

            <database id="fm_hpchead" dbtype="postgres">
                <host value="172.25.xxx.xxx"/>
                <port value="5432"/>
                <dbname value="simmobility_virtualcity_sms_casestudy2017"/>
            </database>

            <database id="fm_hpchead_lt" dbtype="postgres">
                <host value="172.25.xxx.xxx"/>
                <port value="5432"/>
                <dbname value="sim_mob_lt"/>
            </database>
            
            <database id="fm_remote_lt" dbtype="postgres">
                <host value="172.25.xxx.xx"/>
                <port value="5432"/>
                <dbname value="sim_mob_lt"/>
            </database>

        </databases>
    
        <!-- Login credentials to be used for database connections. These can be plaintext, -->
        <!-- file-based, and possibly even signed. Note that invalid credentials will simply be ignored. -->
        <credentials>
            <!-- A file-based credential loads credentials from a JSON file with its own special format. -->
            <!-- Multiple files can be listed, and they will be tried in order until one is found. -->
            <!-- If the first existing file has an error, parsing will NOT continue to the next file. -->
            <!-- The actual credentials file looks something like this: -->
            <!-- 
            {
                "username" : "postgres",
                "password" : "AbCdEfG=",
                "algorithm" : ["clear","xor23","base64","cipher"]
            }
            -->
            <!-- Here, the username is stored in cleartext. The password is stored according to the algorithm listed. -->
            <!-- So in this example, the "clear" text is first "xor23"'d, then "base64" encoded, then finally we arrive at the "cipher" text. -->
            <!-- If you  just want to store the password in cleartext, use "algorithm" : ["clear","cipher"] -->
            <file-based-credential id="fm_remote">
                <file path="private/fm_remote.cred.txt"/>
                <file path="/usr/share/simmobility/credentials/fm_remote.cred.txt"/> <!-- For example -->
            </file-based-credential>
          
            <!-- Plaintext credentials can be used to store the password verbatim. -->
            <!-- BE CAREFUL with these; remember that EVERYONE can see them: -->
            <!--    1) Don't put any passwords here that you care about (e.g., email accounts) -->
            <!--    2) Don't put any passwords to databases on the FM server. -->
            <plaintext-credential id="lt_cred">
                <username value="fmstaff"/>
                <password value="xxxxxx"/>
            </plaintext-credential>
            <plaintext-credential id="fm_local">
                <username value="postgres"/>
                <password value="xxxxxxx"/>
            </plaintext-credential>

            <plaintext-credential id="fm_remote_plain">
                <username value="postgres"/>
                <password value="xxxxxx"/>
            </plaintext-credential>


            <plaintext-credential id="fm_hpchead">
                <username value="postgres"/>
                <password value="xxxxxx"/>
            </plaintext-credential>
        </credentials>
    </constructs>

    <simulation>

        <!-- Preday Seed Value. Currently only the preday is repeatable.  -->
        <seedValue value = "1331"/>

        <!-- Reasonable values for ShortTerm -->
        <!-- <base_granularity   value="100"   units="ms"/> -->
        <!-- <total_runtime      value="14"      units="minutes" /> -->

        <!-- Reasonable values for MidTerm -->
        <base_granularity   value="5"   units="seconds"/>
        <total_runtime      value="1439"      units="minutes" />
        <total_warmup       value="10"     units="seconds" />
        <start_time         value="00:00:00"/>


        <!--Operational cost per km for car. Default value = 0.147-->
        <!--operational_cost value="0.147"/-->
        <vehicle_operational_cost gasolineCostPerLiter=".66" electricityCostPerKWh="0.11" gasolineICEVeconomyLitersPerKm="0.098" gasolineHEVeconomyLitersPerKm="0.005" BEVeconomyKWhPerKm="0.212"  />

        <!--Indicates the percentage of drivers that will use in-simulation travel times rather than the historical travel times-->
        <in_simulation_travel_time_usage value="0"/>

        <!-- Strategy for adding new Agents to Workers. -->
        <!-- "roundrobin" assigns in order. (default) -->
        <!-- "smallest" assigns to the Worker with the smallest Agent count. -->
        <!-- Note that "smallest" does not appear to offer any benefit over "roundrobin" -->
        <workgroup_assignment value="roundrobin"/>

        <!-- Optional. How we enforce mutual exclusion. Can be "buffered" (the default) or "locked" -->
        <mutex_enforcement strategy="buffered"/>

        <!-- Optional. At what value do we start counting for automatically -->
        <!-- generated Agent IDs? Set to a high value if you want to avoid  -->
        <!-- ID collisions when manually specifying Agent IDs in the config file. -->
        <!-- Setting this to zero has the same effect as leaving it out; the default value is zero. -->
        <auto_id_start value="0"/>

        <!--Enabling the closed loop framework interfaces MT/ST with DynaMIT2.0 in order to evaluate the impact of guidance (travel time information) and control strategies (tolls/incentives) in SimMobility. The two simulators run concurrently with SimMobility passing surveillance data from the network to DynaMIT2.0 which in turn provides optimal control strategies and guidance information that agents in SimMobility react to.-->
        <closed_loop enabled="false">
            <closed_loop_guidance file="" is_guidance_directional=""/>
            <closed_loop_toll file=""/>
            <closed_loop_incentives file=""/>
            <sensor_output file="" step_size="" />
        </closed_loop>
    </simulation>

    <generic_props>
        <!--Specifies the location of the dirver behaviour parameter files-->
        <property key="driver_behaviour_file" value="data/driver_behavior_model/driver_param.xml"/>
        <property key="amod_behaviour_file" value="data/driver_behavior_model/amod_driver_param.xml"/>
    </generic_props>

<mobilityServiceController enabled="true" >
<!--  SERVICE_CONTROLLER_UNKNOWN = 0,
      SERVICE_CONTROLLER_ON_HAIL = 1,
      SERVICE_CONTROLLER_GREEDY = 2,
      SERVICE_CONTROLLER_SHARED = 3,
      SERVICE_CONTROLLER_FRAZZOLI = 4,
      SERVICE_CONTROLLER_INCREMENTAL = 5,
      SERVICE_CONTROLLER_PROXIMITY = 6,
      SERVICE_CONTROLLER_AMOD = 7

Note: Controller id indicates the subscribed_controller field specified in the taxi_fleet table-->

    <!-- Trip Support Modes available
    "Rail_SMS_Pool" "AMOD_Pool" "Rail_SMS" "SMS_Pool" "SMS" "AMOD"-->
    <controller 
	id="5" 
	type="7" 
	tripSupportMode = "|SMS|SMS_Pool|Rail_SMS_Pool|Rail_SMS|" 
	vehicleIds="" 
	scheduleComputationPeriod="1" 
	maxFleetSize="5000" 
	maxAggregatedRequests="4" 
	studyAreaEnabledController="false" 
	toleratedExtraTime="1800" 
	maxWaitingTime = "1800" 
	parkingEnabled="true"/>
    <controller                                                                                                                                        id="4" 
       type="1"                                                                                                                                        tripSupportMode = "|Taxi|" 
        vehicleIds="" 
        scheduleComputationPeriod="1" 
        maxFleetSize="2000" 
        maxAggregatedRequests="1" 
        studyAreaEnabledController="false" 
        toleratedExtraTime="1800" 
        maxWaitingTime = "1800" 
        parkingEnabled="true"/>
</mobilityServiceController>

<!-- type {1: Public Transit, 2: PrivateBus, 3: Private Car, 4: Sharing, 5: Private bike, 6: Walk, 7: Taxi}-->
<travel_modes>
   <mode name="BusTravel" type="1" num_sharing="1"/>
        <mode name="MRT" type="1" num_sharing="1"/>
        <mode name="PrivateBus" type="2" num_sharing="1"/>
        <mode name="Car" type="3" num_sharing="1"/>
        <mode name="Car Sharing 2" type="4" num_sharing="2"/>
        <mode name="Car Sharing 3" type="4" num_sharing="3"/>
        <mode name="Motorcycle" type="5" num_sharing="1"/>
        <mode name="Walk" type="6" num_sharing="1"/>
        <mode name="Taxi" type="7" num_sharing="1"/>
        <mode name="SMS" type="7" num_sharing="1"/>
        <mode name="Rail_SMS" type="1" num_sharing="1"/>
	<mode name="SMS_Pool" type="7" num_sharing="2"/>
	<mode name="Rail_SMS_Pool" type="1" num_sharing="2"/>
</travel_modes>

<!-- Activity types can be configured by adding or removing from the list below. -->
<activity_types>
    <activity_type name="Work" withinday_mode_choice="wdmw" num_tours="ntw" tour_mode_dest="tmdw" tour_mode="tmw" tour_time_of_day="ttdw" type="1" logsum_table_column="work"/>
    <activity_type name="Education" withinday_mode_choice="wdme" num_tours="nte" tour_mode_dest="" tour_mode="tme" tour_time_of_day="ttde" type="2" logsum_table_column="education"/>
    <activity_type name="Shop" withinday_mode_choice="wdmso" num_tours="nts" tour_mode_dest="tmds" tour_mode="" tour_time_of_day="ttdo" type="3" logsum_table_column="shop"/>
    <activity_type name="Other" withinday_mode_choice="wdmso" num_tours="nto" tour_mode_dest="tmdo" tour_mode="" tour_time_of_day="ttdo" type="3" logsum_table_column="other"/>
    <!--<activity_type name="NewType" withinday_mode_choice="wdmso" num_tours="nto" tour_mode_dest="tmdo" tour_mode="" tour_time_of_day="ttdo" type="3" logsum_table_column="newtype"/>-->
</activity_types>

    <merge_log_files value="true"/>

    <schemas enabled= "true">
        <main_schema  value= "virtual_city."/>
        <calibration_schema value= "calibration2012."/>
        <public_schema value= "public."/>
        <demand_schema value= "demand."/>
	<supply_schema value= "supply."/>
    </schemas>

    <table_names>
            <table name="income_cat" value="income_category" />
            <table name="vehicle_ownership_status" value="vehicle_ownership_status" />
            <table name="AM_cost_table" value="learned_amcosts" />
            <table name="PM_cost_table" value="learned_pmcosts" />
            <table name="OP_cost_table" value="learned_opcosts" />
            <table name="taz_table" value="taz_2012" />
            <table name="node_taz_map_table" value="node_taz_map" />
            <table name="taz_without_node_table" value="taz_without_node" />
            <table name="learned_travel_time_table_car" value="learned_tcost_car" />
            <table name="learned_travel_time_table_bus" value="learned_tcost_bus" />
    </table_names>


    <stored_proc_names>
            <stored_proc name="get_individual_id_list" value="getindividualids()" />
            <!-- The individual_by_id stored proc should be changed to getindividual_vehicle_by_id for the Energy consumption model -->
            <stored_proc name="individual_by_id" value="getindividualbyidwithvehicle(:_id)" />
            <stored_proc name="addresses" value="getaddresses()" />
            <stored_proc name="postcode_node_map" value="get_postcode_node_map()" />
    </stored_proc_names>

</config>
